apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
        ndk {
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', "mips"
            abiFilters "armeabi-v7a","arm64-v8a"
        }
        manifestPlaceholders = [
                JPUSH_APPKEY : "59c2a793b2eb0b4d4f687612",//极光推送AppKey
                JPUSH_CHANNEL: "default_developer",
        ]
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file('./bxyun.jks')
            storePassword '123456'
            keyAlias = 'key0'
            keyPassword '123456'
        }
        debug {
            storeFile file('./bxyun.jks')
            storePassword '123456'
            keyAlias = 'key0'
            keyPassword '123456'
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
//            signingConfig signingConfigs.debug
        }
    }
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                //在这里修改apk文件名，引号内的字符串都可以随便定义
                outputFileName = "${variant.name}-${variant.versionName}.apk"
            }
    }
    //统一资源前缀，规范资源引用
    resourcePrefix "app_"
    buildFeatures{
        dataBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
repositories {
    flatDir {
        dirs project(':library-base').file('libs')
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    kapt rootProject.ext.dependencies["arouter-compiler"]
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        implementation project(':module-home')
        implementation project(':module-sign')
        implementation project(':module-demo')
    }
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
